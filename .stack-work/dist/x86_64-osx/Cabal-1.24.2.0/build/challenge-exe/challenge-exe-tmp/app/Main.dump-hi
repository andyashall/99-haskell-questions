
==================== FINAL INTERFACE ====================
2017-09-07 14:30:29.540156 UTC

interface main@main:Main 8002
  interface hash: ecf857a1099878add80bcccf560cd275
  ABI hash: 00c1ff2e4b54dbbb07145cb351dca963
  export-list hash: d13375b8ae77263981320fe4134adae8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 47c6d773297114f4480e2b123a2437d8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.isPal
  Main.listN
  Main.main
  Main.myLast
  Main.myNth
  Main.mySLast
  Main.revL
module dependencies:
package dependencies: base-4.9.1.0*
                      challenge-0.1.0.0@challenge-0.1.0.0-KebrR78zYzuLT0BP3AmsMm
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  challenge-0.1.0.0@challenge-0.1.0.0-KebrR78zYzuLT0BP3AmsMm:Lib bbe63c82b1a111d7b7dc2509dd3df978
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
bd1501cb6b2cf059591bdbbe555a23cf
  isPal :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (x :: [a]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   $dEq
                   x
                   (GHC.List.reverse1 @ a x (GHC.Types.[] @ a))) -}
75bac2411b7289ff21e1edc1afbe66e4
  listN :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
d6d0c69ea1dcf0d6859ef643723989e1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1dac11b1e1f4ed8521a7e778a1be2d13
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   eta) -}
ff3c896f000583dbb68c3c4c90de3ce4
  main2 :: GHC.Base.String
  {- Unfolding: (case GHC.Classes.$fEq[]_$c==
                        @ GHC.Integer.Type.Integer
                        GHC.Integer.Type.$fEqInteger
                        Main.main_x
                        Main.main3 of wild {
                   GHC.Types.False -> GHC.Show.shows18
                   GHC.Types.True -> GHC.Show.shows17 }) -}
aae532d9c538205939baf3a2e5a43181
  main3 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (GHC.List.reverse1
                   @ GHC.Integer.Type.Integer
                   Main.main_x
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
baec1ae318cf1d4f3a942158a526b752
  main4 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main8
                   Main.main5) -}
57cf1f170bc4fe9a1d604bf37a14dbec
  main5 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main8
                   Main.main6) -}
704e9dd9cf5e13c0fe18b31dd5def930
  main6 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main7
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
0ededbc132a95b63de1f75d70d1e04c6
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
b9cfba96f31b6b009e0c3676a3498390
  main8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
82f408980905bd26e4915388b7f15a54
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
436542681a175496b8c1da28e43808fe
  main_x :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.main7
                   Main.main4) -}
c9186d4a558f96544d65d38cb8685478
  myLast :: [a] -> a
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 GHC.List.$w!! @ a x (GHC.Prim.-# ww2 1#) }) -}
3918f121f5025566d64b09797598002f
  myNth :: [a] -> GHC.Types.Int -> a
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: [a]) (y :: GHC.Types.Int) ->
                 case y of wild { GHC.Types.I# x1 ->
                 GHC.List.$w!! @ a x (GHC.Prim.-# x1 1#) }) -}
636e0ada07a0150626a24e6477b6206d
  mySLast :: [a] -> a
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                 GHC.List.$w!! @ a x (GHC.Prim.-# ww2 2#) }) -}
039fc62eca44d9772acc7a687ab6c573
  revL :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True) GHC.List.reverse -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

